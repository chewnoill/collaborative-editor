/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module "zapatos/schema" {
  import type * as db from "zapatos/db";

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary {
    version: 104;
  }

  /* === schema: app === */

  export namespace app {
    /* --- enums --- */
    /* (none) */

    /* --- tables --- */

    /**
     * **app.access_token**
     * - Table in database
     */
    export namespace access_token {
      export type Table = "app.access_token";
      export interface Selectable {
        /**
         * **app.access_token.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.access_token.user_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        user_id: string;
        /**
         * **app.access_token.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: Date;
      }
      export interface JSONSelectable {
        /**
         * **app.access_token.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.access_token.user_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        user_id: string;
        /**
         * **app.access_token.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: db.TimestampString;
      }
      export interface Whereable {
        /**
         * **app.access_token.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.access_token.user_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.access_token.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
              | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.access_token.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.access_token.user_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        user_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.access_token.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.access_token.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.access_token.user_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.access_token.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex = "access_token_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.data_upload**
     * - Table in database
     */
    export namespace data_upload {
      export type Table = "app.data_upload";
      export interface Selectable {
        /**
         * **app.data_upload.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.data_upload.file_name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        file_name: string;
        /**
         * **app.data_upload.owner_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        owner_id: string;
        /**
         * **app.data_upload.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: Date;
        /**
         * **app.data_upload.size**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        size: number;
        /**
         * **app.data_upload.mime_type**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        mime_type: string;
      }
      export interface JSONSelectable {
        /**
         * **app.data_upload.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.data_upload.file_name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        file_name: string;
        /**
         * **app.data_upload.owner_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        owner_id: string;
        /**
         * **app.data_upload.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: db.TimestampString;
        /**
         * **app.data_upload.size**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        size: number;
        /**
         * **app.data_upload.mime_type**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        mime_type: string;
      }
      export interface Whereable {
        /**
         * **app.data_upload.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.data_upload.file_name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        file_name?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.data_upload.owner_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        owner_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.data_upload.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
              | db.ParentColumn
            >;
        /**
         * **app.data_upload.size**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        size?:
          | number
          | db.Parameter<number>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.data_upload.mime_type**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        mime_type?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.data_upload.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.data_upload.file_name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        file_name: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.data_upload.owner_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        owner_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.data_upload.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment;
        /**
         * **app.data_upload.size**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        size: number | db.Parameter<number> | db.SQLFragment;
        /**
         * **app.data_upload.mime_type**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        mime_type: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.data_upload.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.data_upload.file_name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        file_name?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.data_upload.owner_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        owner_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.data_upload.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.DefaultType
              | db.SQLFragment
            >;
        /**
         * **app.data_upload.size**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        size?:
          | number
          | db.Parameter<number>
          | db.SQLFragment
          | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
         * **app.data_upload.mime_type**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        mime_type?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = "data_upload_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.document**
     * - Table in database
     */
    export namespace document {
      export type Table = "app.document";
      export interface Selectable {
        /**
         * **app.document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document.creator_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        creator_id: string;
        /**
         * **app.document.is_public**
         * - `bool` in database
         * - Nullable, default: `false`
         */
        is_public: boolean | null;
        /**
         * **app.document.name**
         * - `text` in database
         * - `NOT NULL`, default: `''::text`
         */
        name: string;
        /**
         * **app.document.origin**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        origin: Buffer;
        /**
         * **app.document.value**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        value: string;
        /**
         * **app.document.web_rtc_key**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        web_rtc_key: string;
        /**
        * **app.document.latest_update_time**
        *
        * 
    @name latest_update_time
    @omit create,update
  
    # Last Update Time
  
    Updates are processed through the document_updates_queue table first.
    This records time of the last update processed.
  
    TODO: this should be a foreign key that points directly to a row in
    the document_updates_queue table.
  
  
        * - `timestamp` in database
        * - `NOT NULL`, no default
        */
        latest_update_time: Date;
      }
      export interface JSONSelectable {
        /**
         * **app.document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document.creator_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        creator_id: string;
        /**
         * **app.document.is_public**
         * - `bool` in database
         * - Nullable, default: `false`
         */
        is_public: boolean | null;
        /**
         * **app.document.name**
         * - `text` in database
         * - `NOT NULL`, default: `''::text`
         */
        name: string;
        /**
         * **app.document.origin**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        origin: db.ByteArrayString;
        /**
         * **app.document.value**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        value: string;
        /**
         * **app.document.web_rtc_key**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        web_rtc_key: string;
        /**
        * **app.document.latest_update_time**
        *
        * 
    @name latest_update_time
    @omit create,update
  
    # Last Update Time
  
    Updates are processed through the document_updates_queue table first.
    This records time of the last update processed.
  
    TODO: this should be a foreign key that points directly to a row in
    the document_updates_queue table.
  
  
        * - `timestamp` in database
        * - `NOT NULL`, no default
        */
        latest_update_time: db.TimestampString;
      }
      export interface Whereable {
        /**
         * **app.document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document.creator_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        creator_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document.is_public**
         * - `bool` in database
         * - Nullable, default: `false`
         */
        is_public?:
          | boolean
          | db.Parameter<boolean>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document.name**
         * - `text` in database
         * - `NOT NULL`, default: `''::text`
         */
        name?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document.origin**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        origin?:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.ByteArrayString | Buffer)
              | db.Parameter<db.ByteArrayString | Buffer>
              | db.SQLFragment
              | db.ParentColumn
            >;
        /**
         * **app.document.value**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        value?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document.web_rtc_key**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        web_rtc_key?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
        * **app.document.latest_update_time**
        *
        * 
    @name latest_update_time
    @omit create,update
  
    # Last Update Time
  
    Updates are processed through the document_updates_queue table first.
    This records time of the last update processed.
  
    TODO: this should be a foreign key that points directly to a row in
    the document_updates_queue table.
  
  
        * - `timestamp` in database
        * - `NOT NULL`, no default
        */
        latest_update_time?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
              | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.document.creator_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        creator_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document.is_public**
         * - `bool` in database
         * - Nullable, default: `false`
         */
        is_public?:
          | boolean
          | db.Parameter<boolean>
          | null
          | db.DefaultType
          | db.SQLFragment;
        /**
         * **app.document.name**
         * - `text` in database
         * - `NOT NULL`, default: `''::text`
         */
        name?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.document.origin**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        origin:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment;
        /**
         * **app.document.value**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        value: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document.web_rtc_key**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        web_rtc_key: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app.document.latest_update_time**
        *
        * 
    @name latest_update_time
    @omit create,update
  
    # Last Update Time
  
    Updates are processed through the document_updates_queue table first.
    This records time of the last update processed.
  
    TODO: this should be a foreign key that points directly to a row in
    the document_updates_queue table.
  
  
        * - `timestamp` in database
        * - `NOT NULL`, no default
        */
        latest_update_time:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document.creator_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        creator_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document.is_public**
         * - `bool` in database
         * - Nullable, default: `false`
         */
        is_public?:
          | boolean
          | db.Parameter<boolean>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | boolean
              | db.Parameter<boolean>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
        /**
         * **app.document.name**
         * - `text` in database
         * - `NOT NULL`, default: `''::text`
         */
        name?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document.origin**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        origin?:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.ByteArrayString | Buffer)
              | db.Parameter<db.ByteArrayString | Buffer>
              | db.SQLFragment
            >;
        /**
         * **app.document.value**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        value?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document.web_rtc_key**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        web_rtc_key?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app.document.latest_update_time**
        *
        * 
    @name latest_update_time
    @omit create,update
  
    # Last Update Time
  
    Updates are processed through the document_updates_queue table first.
    This records time of the last update processed.
  
    TODO: this should be a foreign key that points directly to a row in
    the document_updates_queue table.
  
  
        * - `timestamp` in database
        * - `NOT NULL`, no default
        */
        latest_update_time?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
            >;
      }
      export type UniqueIndex = "document_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.document_history**
     * - Table in database
     */
    export namespace document_history {
      export type Table = "app.document_history";
      export interface Selectable {
        /**
         * **app.document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('app.document_history_sequence_seq'::regclass)`
         */
        sequence: number;
        /**
         * **app.document_history.diff**
         * - `text` in database
         * - Nullable, no default
         */
        diff: string | null;
      }
      export interface JSONSelectable {
        /**
         * **app.document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('app.document_history_sequence_seq'::regclass)`
         */
        sequence: number;
        /**
         * **app.document_history.diff**
         * - `text` in database
         * - Nullable, no default
         */
        diff: string | null;
      }
      export interface Whereable {
        /**
         * **app.document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('app.document_history_sequence_seq'::regclass)`
         */
        sequence?:
          | number
          | db.Parameter<number>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_history.diff**
         * - `text` in database
         * - Nullable, no default
         */
        diff?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('app.document_history_sequence_seq'::regclass)`
         */
        sequence?:
          | number
          | db.Parameter<number>
          | db.DefaultType
          | db.SQLFragment;
        /**
         * **app.document_history.diff**
         * - `text` in database
         * - Nullable, no default
         */
        diff?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, default: `nextval('app.document_history_sequence_seq'::regclass)`
         */
        sequence?:
          | number
          | db.Parameter<number>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              number | db.Parameter<number> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document_history.diff**
         * - `text` in database
         * - Nullable, no default
         */
        diff?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | string
              | db.Parameter<string>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex = "document_history_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.document_tags**
     * - Table in database
     */
    export namespace document_tags {
      export type Table = "app.document_tags";
      export interface Selectable {
        /**
         * **app.document_tags.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_tags.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_tags.tag**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        tag: string;
        /**
         * **app.document_tags.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: Date;
      }
      export interface JSONSelectable {
        /**
         * **app.document_tags.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_tags.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_tags.tag**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        tag: string;
        /**
         * **app.document_tags.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: db.TimestampString;
      }
      export interface Whereable {
        /**
         * **app.document_tags.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_tags.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_tags.tag**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        tag?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_tags.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
              | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.document_tags.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.document_tags.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_tags.tag**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        tag: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_tags.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.document_tags.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document_tags.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_tags.tag**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        tag?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_tags.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex =
        | "document_tags_document_id_tag_key"
        | "document_tags_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.document_update_document_history**
     * - Table in database
     */
    export namespace document_update_document_history {
      export type Table = "app.document_update_document_history";
      export interface Selectable {
        /**
         * **app.document_update_document_history.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_update_document_history.document_update_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_update_id: string;
        /**
         * **app.document_update_document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_update_document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        sequence: number;
      }
      export interface JSONSelectable {
        /**
         * **app.document_update_document_history.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_update_document_history.document_update_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_update_id: string;
        /**
         * **app.document_update_document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_update_document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        sequence: number;
      }
      export interface Whereable {
        /**
         * **app.document_update_document_history.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_update_document_history.document_update_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_update_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_update_document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_update_document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        sequence?:
          | number
          | db.Parameter<number>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              number | db.Parameter<number> | db.SQLFragment | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.document_update_document_history.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.document_update_document_history.document_update_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_update_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_update_document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_update_document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        sequence: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.document_update_document_history.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document_update_document_history.document_update_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_update_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_update_document_history.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_update_document_history.sequence**
         * - `int4` in database
         * - `NOT NULL`, no default
         */
        sequence?:
          | number
          | db.Parameter<number>
          | db.SQLFragment
          | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = "document_update_document_history_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.document_updates_queue**
     * - Table in database
     */
    export namespace document_updates_queue {
      export type Table = "app.document_updates_queue";
      export interface Selectable {
        /**
         * **app.document_updates_queue.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_updates_queue.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id: string | null;
        /**
         * **app.document_updates_queue.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_updates_queue.document_update**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        document_update: Buffer;
        /**
         * **app.document_updates_queue.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: Date;
      }
      export interface JSONSelectable {
        /**
         * **app.document_updates_queue.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.document_updates_queue.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id: string | null;
        /**
         * **app.document_updates_queue.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string;
        /**
         * **app.document_updates_queue.document_update**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        document_update: db.ByteArrayString;
        /**
         * **app.document_updates_queue.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at: db.TimestampString;
      }
      export interface Whereable {
        /**
         * **app.document_updates_queue.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_updates_queue.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_updates_queue.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.document_updates_queue.document_update**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        document_update?:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.ByteArrayString | Buffer)
              | db.Parameter<db.ByteArrayString | Buffer>
              | db.SQLFragment
              | db.ParentColumn
            >;
        /**
         * **app.document_updates_queue.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.SQLFragment
              | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.document_updates_queue.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.document_updates_queue.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment;
        /**
         * **app.document_updates_queue.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id: string | db.Parameter<string> | db.SQLFragment;
        /**
         * **app.document_updates_queue.document_update**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        document_update:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment;
        /**
         * **app.document_updates_queue.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.document_updates_queue.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.document_updates_queue.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | string
              | db.Parameter<string>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
        /**
         * **app.document_updates_queue.document_id**
         * - `uuid` in database
         * - `NOT NULL`, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
         * **app.document_updates_queue.document_update**
         * - `bytea` in database
         * - `NOT NULL`, no default
         */
        document_update?:
          | (db.ByteArrayString | Buffer)
          | db.Parameter<db.ByteArrayString | Buffer>
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.ByteArrayString | Buffer)
              | db.Parameter<db.ByteArrayString | Buffer>
              | db.SQLFragment
            >;
        /**
         * **app.document_updates_queue.created_at**
         * - `timestamp` in database
         * - `NOT NULL`, default: `now()`
         */
        created_at?:
          | (db.TimestampString | Date)
          | db.Parameter<db.TimestampString | Date>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | (db.TimestampString | Date)
              | db.Parameter<db.TimestampString | Date>
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex = "document_updates_queue_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.user**
     * - Table in database
     */
    export namespace user {
      export type Table = "app.user";
      export interface Selectable {
        /**
         * **app.user.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.user.name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        name: string;
        /**
        * **app.user.password**
        *
        * 
    @name password
    @omit
  
    Password
  
    hashed, still sensitive, do not expose to GQL
  
        * - `text` in database
        * - Nullable, no default
        */
        password: string | null;
      }
      export interface JSONSelectable {
        /**
         * **app.user.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.user.name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        name: string;
        /**
        * **app.user.password**
        *
        * 
    @name password
    @omit
  
    Password
  
    hashed, still sensitive, do not expose to GQL
  
        * - `text` in database
        * - Nullable, no default
        */
        password: string | null;
      }
      export interface Whereable {
        /**
         * **app.user.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.user.name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        name?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
        * **app.user.password**
        *
        * 
    @name password
    @omit
  
    Password
  
    hashed, still sensitive, do not expose to GQL
  
        * - `text` in database
        * - Nullable, no default
        */
        password?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.user.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.user.name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **app.user.password**
        *
        * 
    @name password
    @omit
  
    Password
  
    hashed, still sensitive, do not expose to GQL
  
        * - `text` in database
        * - Nullable, no default
        */
        password?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.user.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.user.name**
         * - `text` in database
         * - `NOT NULL`, no default
         */
        name?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **app.user.password**
        *
        * 
    @name password
    @omit
  
    Password
  
    hashed, still sensitive, do not expose to GQL
  
        * - `text` in database
        * - Nullable, no default
        */
        password?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | string
              | db.Parameter<string>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex = "user_name_key" | "user_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /**
     * **app.user_document**
     * - Table in database
     */
    export namespace user_document {
      export type Table = "app.user_document";
      export interface Selectable {
        /**
         * **app.user_document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.user_document.document_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        document_id: string | null;
        /**
         * **app.user_document.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id: string | null;
      }
      export interface JSONSelectable {
        /**
         * **app.user_document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id: string;
        /**
         * **app.user_document.document_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        document_id: string | null;
        /**
         * **app.user_document.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id: string | null;
      }
      export interface Whereable {
        /**
         * **app.user_document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.user_document.document_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
        /**
         * **app.user_document.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | db.SQLFragment
          | db.ParentColumn
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.SQLFragment | db.ParentColumn
            >;
      }
      export interface Insertable {
        /**
         * **app.user_document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
         * **app.user_document.document_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment;
        /**
         * **app.user_document.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment;
      }
      export interface Updatable {
        /**
         * **app.user_document.id**
         * - `uuid` in database
         * - `NOT NULL`, default: `uuid_generate_v4()`
         */
        id?:
          | string
          | db.Parameter<string>
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              string | db.Parameter<string> | db.DefaultType | db.SQLFragment
            >;
        /**
         * **app.user_document.document_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        document_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | string
              | db.Parameter<string>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
        /**
         * **app.user_document.user_id**
         * - `uuid` in database
         * - Nullable, no default
         */
        user_id?:
          | string
          | db.Parameter<string>
          | null
          | db.DefaultType
          | db.SQLFragment
          | db.SQLFragment<
              any,
              | string
              | db.Parameter<string>
              | null
              | db.DefaultType
              | db.SQLFragment
            >;
      }
      export type UniqueIndex =
        | "user_document_document_id_user_id_key"
        | "user_document_pkey";
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<
        Selectable,
        T[number]
      >;
      export type SQLExpression =
        | Table
        | db.ColumnNames<Updatable | (keyof Updatable)[]>
        | db.ColumnValues<Updatable>
        | Whereable
        | Column
        | db.ParentColumn
        | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }

    /* --- aggregate types --- */

    export type Table =
      | access_token.Table
      | data_upload.Table
      | document.Table
      | document_history.Table
      | document_tags.Table
      | document_update_document_history.Table
      | document_updates_queue.Table
      | user.Table
      | user_document.Table;
    export type Selectable =
      | access_token.Selectable
      | data_upload.Selectable
      | document.Selectable
      | document_history.Selectable
      | document_tags.Selectable
      | document_update_document_history.Selectable
      | document_updates_queue.Selectable
      | user.Selectable
      | user_document.Selectable;
    export type JSONSelectable =
      | access_token.JSONSelectable
      | data_upload.JSONSelectable
      | document.JSONSelectable
      | document_history.JSONSelectable
      | document_tags.JSONSelectable
      | document_update_document_history.JSONSelectable
      | document_updates_queue.JSONSelectable
      | user.JSONSelectable
      | user_document.JSONSelectable;
    export type Whereable =
      | access_token.Whereable
      | data_upload.Whereable
      | document.Whereable
      | document_history.Whereable
      | document_tags.Whereable
      | document_update_document_history.Whereable
      | document_updates_queue.Whereable
      | user.Whereable
      | user_document.Whereable;
    export type Insertable =
      | access_token.Insertable
      | data_upload.Insertable
      | document.Insertable
      | document_history.Insertable
      | document_tags.Insertable
      | document_update_document_history.Insertable
      | document_updates_queue.Insertable
      | user.Insertable
      | user_document.Insertable;
    export type Updatable =
      | access_token.Updatable
      | data_upload.Updatable
      | document.Updatable
      | document_history.Updatable
      | document_tags.Updatable
      | document_update_document_history.Updatable
      | document_updates_queue.Updatable
      | user.Updatable
      | user_document.Updatable;
    export type UniqueIndex =
      | access_token.UniqueIndex
      | data_upload.UniqueIndex
      | document.UniqueIndex
      | document_history.UniqueIndex
      | document_tags.UniqueIndex
      | document_update_document_history.UniqueIndex
      | document_updates_queue.UniqueIndex
      | user.UniqueIndex
      | user_document.UniqueIndex;
    export type Column =
      | access_token.Column
      | data_upload.Column
      | document.Column
      | document_history.Column
      | document_tags.Column
      | document_update_document_history.Column
      | document_updates_queue.Column
      | user.Column
      | user_document.Column;

    export type AllBaseTables = [
      access_token.Table,
      data_upload.Table,
      document.Table,
      document_history.Table,
      document_tags.Table,
      document_update_document_history.Table,
      document_updates_queue.Table,
      user.Table,
      user_document.Table
    ];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [
      access_token.Table,
      data_upload.Table,
      document.Table,
      document_history.Table,
      document_tags.Table,
      document_update_document_history.Table,
      document_updates_queue.Table,
      user.Table,
      user_document.Table
    ];
  }

  /* === global aggregate types === */

  export type Schema = "app";
  export type Table = app.Table;
  export type Selectable = app.Selectable;
  export type JSONSelectable = app.JSONSelectable;
  export type Whereable = app.Whereable;
  export type Insertable = app.Insertable;
  export type Updatable = app.Updatable;
  export type UniqueIndex = app.UniqueIndex;
  export type Column = app.Column;

  export type AllSchemas = ["app"];
  export type AllBaseTables = [...app.AllBaseTables];
  export type AllForeignTables = [...app.AllForeignTables];
  export type AllViews = [...app.AllViews];
  export type AllMaterializedViews = [...app.AllMaterializedViews];
  export type AllTablesAndViews = [...app.AllTablesAndViews];

  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "app.access_token": app.access_token.Selectable;
    "app.data_upload": app.data_upload.Selectable;
    "app.document": app.document.Selectable;
    "app.document_history": app.document_history.Selectable;
    "app.document_tags": app.document_tags.Selectable;
    "app.document_update_document_history": app.document_update_document_history.Selectable;
    "app.document_updates_queue": app.document_updates_queue.Selectable;
    "app.user": app.user.Selectable;
    "app.user_document": app.user_document.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "app.access_token": app.access_token.JSONSelectable;
    "app.data_upload": app.data_upload.JSONSelectable;
    "app.document": app.document.JSONSelectable;
    "app.document_history": app.document_history.JSONSelectable;
    "app.document_tags": app.document_tags.JSONSelectable;
    "app.document_update_document_history": app.document_update_document_history.JSONSelectable;
    "app.document_updates_queue": app.document_updates_queue.JSONSelectable;
    "app.user": app.user.JSONSelectable;
    "app.user_document": app.user_document.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "app.access_token": app.access_token.Whereable;
    "app.data_upload": app.data_upload.Whereable;
    "app.document": app.document.Whereable;
    "app.document_history": app.document_history.Whereable;
    "app.document_tags": app.document_tags.Whereable;
    "app.document_update_document_history": app.document_update_document_history.Whereable;
    "app.document_updates_queue": app.document_updates_queue.Whereable;
    "app.user": app.user.Whereable;
    "app.user_document": app.user_document.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "app.access_token": app.access_token.Insertable;
    "app.data_upload": app.data_upload.Insertable;
    "app.document": app.document.Insertable;
    "app.document_history": app.document_history.Insertable;
    "app.document_tags": app.document_tags.Insertable;
    "app.document_update_document_history": app.document_update_document_history.Insertable;
    "app.document_updates_queue": app.document_updates_queue.Insertable;
    "app.user": app.user.Insertable;
    "app.user_document": app.user_document.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "app.access_token": app.access_token.Updatable;
    "app.data_upload": app.data_upload.Updatable;
    "app.document": app.document.Updatable;
    "app.document_history": app.document_history.Updatable;
    "app.document_tags": app.document_tags.Updatable;
    "app.document_update_document_history": app.document_update_document_history.Updatable;
    "app.document_updates_queue": app.document_updates_queue.Updatable;
    "app.user": app.user.Updatable;
    "app.user_document": app.user_document.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "app.access_token": app.access_token.UniqueIndex;
    "app.data_upload": app.data_upload.UniqueIndex;
    "app.document": app.document.UniqueIndex;
    "app.document_history": app.document_history.UniqueIndex;
    "app.document_tags": app.document_tags.UniqueIndex;
    "app.document_update_document_history": app.document_update_document_history.UniqueIndex;
    "app.document_updates_queue": app.document_updates_queue.UniqueIndex;
    "app.user": app.user.UniqueIndex;
    "app.user_document": app.user_document.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "app.access_token": app.access_token.Column;
    "app.data_upload": app.data_upload.Column;
    "app.document": app.document.Column;
    "app.document_history": app.document_history.Column;
    "app.document_tags": app.document_tags.Column;
    "app.document_update_document_history": app.document_update_document_history.Column;
    "app.document_updates_queue": app.document_updates_queue.Column;
    "app.user": app.user.Column;
    "app.user_document": app.user_document.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "app.access_token": app.access_token.SQL;
    "app.data_upload": app.data_upload.SQL;
    "app.document": app.document.SQL;
    "app.document_history": app.document_history.SQL;
    "app.document_tags": app.document_tags.SQL;
    "app.document_update_document_history": app.document_update_document_history.SQL;
    "app.document_updates_queue": app.document_updates_queue.SQL;
    "app.user": app.user.SQL;
    "app.user_document": app.user_document.SQL;
  }[T];
}
