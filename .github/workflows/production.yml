# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Production

on:
  push:
    branches: [ master, wc/prod-ci ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      PROJECT_ID: willdocs-1
      APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      BASE_DOMAIN: ${{secrets.BASE_DOMAIN}}
      REDIS_URL: ${{secrets.REDIS_URL}}
      NEW_RELIC_API_KEY: ${{secrets.NEW_RELIC_API_KEY}}
      NEW_RELIC_ACCOUNT_ID: ${{secrets.NEW_RELIC_ACCOUNT_ID}}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - name: Use Node.js 14.x
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
    - uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: willdocs-1
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: info
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Init Terraform
      run: |
        terraform -chdir=terraform/app init
        terraform -chdir=terraform/app output
    - run: yarn
    - name: Build Client
      run: |
        # Build Client
        export NEXT_PUBLIC_SIGNAL_URL=wss://${BASE_DOMAIN}/ws/signal
        export NEXT_PUBLIC_PROVIDER_URL=wss://${BASE_DOMAIN}/ws/provider
        yarn website build
        cp -R website/build packages/client/public/website
        yarn client build
    - name: Build Service
      run: yarn service build
    - name: Bundle Service
      run: |
        # zip up service bundle
        PRIVATE_BUCKET=$(terraform -chdir=terraform/app output -raw private-bucket)
        echo "PRIVATE_BUCKET=$PRIVATE_BUCKET" >> $GITHUB_ENV
        tar cfz service.tgz \
          packages/client/out/* \
          packages/service/dist/* \
          node_modules/moniker/dict/* \
          node_modules/bullmq/dist/esm/commands/*

    - name: Copy JS Bunde
      run: |
        cp service.tgz ./docker/service
        cp service.tgz ./docker/worker
    - name: Cloud Build Service
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: willdocs-1
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: builds submit ./docker/service --tag us-east1-docker.pkg.dev/willdocs-1/docker-repo/service:latest

    - name: Cloud Build Worker
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: willdocs-1
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: builds submit ./docker/worker --tag us-east1-docker.pkg.dev/willdocs-1/docker-repo/worker:latest
    - name: Copy Migrations
      run: |
        cp  -R packages/migrations ./docker/migrations
    - name: Cloud Build Migrations
      uses: actions-hub/gcloud@master
      env:
        PROJECT_ID: willdocs-1
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      with:
        args: builds submit ./docker/migrations --tag us-east1-docker.pkg.dev/willdocs-1/docker-repo/migrations:latest

    - name: Terraform Deploy
      if: ${{ false }}
      run: |
        NEXT_VERSION=$(expr $(terraform -chdir=terraform/app output build_number) + 1)
        terraform -chdir=terraform/app taint google_compute_instance.worker
        terraform -chdir=terraform/app apply --auto-approve \
          -var="build_number=${NEXT_VERSION}" \
          -var="dns_name=${BASE_DOMAIN}" \
          -var="redis_url=${REDIS_URL}" \
          -var="NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}" \
          -var="NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}"
